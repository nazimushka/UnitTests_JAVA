1)	Почему использование тестовых заглушек может быть полезным при написании модульных тестов?
Ответ. Использование тестовых заглушек в модульном тестировании может быть полезным по следующим причинам:

Упрощение кода. Заглушки упрощают код, который необходимо протестировать, позволяя сконцентрироваться на логике метода, а не на его зависимостях.
Изоляция. Заглушки позволяют изолировать тестируемый код от внешних зависимостей, таких как базы данных или внешние API, что снижает вероятность появления ошибок и улучшает стабильность тестов.
Повторное использование. Заглушки могут быть использованы для различных тестов, что облегчает их повторное использование и снижает дублирование кода.
Тестирование граничных значений. Заглушки позволяют тестировать граничные значения аргументов метода, что может помочь обнаружить ошибки и улучшить качество кода.
Сокращение времени тестирования. Использование заглушек может сократить время, необходимое для выполнения тестов, поскольку они не зависят от внешних систем или баз данных.
Улучшение видимости. Заглушки делают вызовы методов более видимыми, что упрощает отладку и понимание того, как работает тестируемый код.
В целом, использование тестовых заглушек при написании модульных тестов может улучшить качество и стабильность кода, а также снизить затраты на его поддержку и развитие.
2)	Какой тип тестовой заглушки следует использовать, если вам нужно проверить, что метод был вызван с определенными аргументами?
Ответ . Для подтверждения правильности вызова метода с заданными параметрами, оптимальным видом тестовой заглушки является Mock. Мock-объекты собирают информацию о вызовах методов и мы можем удостовериться, был ли вызван метод с требуемыми параметрами.
3)	Какой тип тестовой заглушки следует использовать, если вам просто нужно вернуть определенное значение или исключение в ответ на вызов метода?
Ответ. Если наша задача состоит в том, чтобы просто вернуть конкретное значение или создать исключение в ответ на вызов метода без потребности отслеживать, был ли метод вызван, тогда мы можем применить Stub. Объекты-заглушки служат для замены настоящих методов и возврата заранее определенных значений.
4)	Какой тип тестовой заглушки вы бы использовали для имитации  взаимодействия с внешним API или базой данных?
Ответ. Для моделирования взаимодействия с внешним API или базой данных, оптимальным типом тестовой заглушки является Fake. Fake-объекты являются упрощёнными реализациями внешних зависимостей, работающих в памяти и не требующих реального взаимодействия с внешними системами. Это позволяет выполнять тестирование без риска воздействия на реальные данные или системы.
